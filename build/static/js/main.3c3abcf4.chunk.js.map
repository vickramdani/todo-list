{"version":3,"sources":["component/TodoForm.module.css","component/TodoList.module.css","component/TodoForm.js","component/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoForm","addTodo","useState","input","setInput","className","style","inputField","onSubmit","e","preventDefault","uuidv4","type","placeholder","todoInput","value","onChange","target","TodoList","todos","removeTodos","completeTodos","map","todo","id","list","key","textDecoration","isCompleted","todolist","task","onClick","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","newTodos","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,WAAa,6BAA6B,UAAY,8B,gBCAxED,EAAOC,QAAU,CAAC,KAAO,uBAAuB,SAAW,6B,mMC8B5CC,EA3BE,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACNC,mBAAS,IADH,mBACzBC,EADyB,KAClBC,EADkB,KAchC,OACE,0BAAMC,UAAWC,IAAMC,WAAYC,SARhB,SAACC,GACpBA,EAAEC,iBACGP,IACLF,EAAQE,EAAOQ,eACfP,EAAS,OAKP,2BACEQ,KAAK,OACLC,YAAY,cACZR,UAAWC,IAAMQ,UACjBC,MAAOZ,EACPa,SAlBc,SAACP,GACnBL,EAASK,EAAEQ,OAAOF,Y,gBC8BPG,EAnCE,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,cACtC,OACE,6BACGF,EAAMG,KAAI,SAACC,GAAD,OACT,yBAAKlB,UAAU,aAAamB,GAAIlB,IAAMmB,KAAMC,IAAKH,EAAKC,IACpD,6BACE,uBACElB,MAAO,CACLqB,gBAAqC,IAArBJ,EAAKK,YAAuB,eAAiB,IAE/DvB,UAAWC,IAAMuB,UAEhBN,EAAKO,OAGV,6BACE,4BACEzB,UAAU,mCACV0B,QAAS,kBAAMX,EAAYG,EAAKC,MAEhC,uBAAGnB,UAAU,kBAAb,UAEF,4BACEA,UAAU,+BACV0B,QAAS,kBAAMV,EAAcE,EAAKC,MAElC,uBAAGnB,UAAU,kBAAb,iBCyBC2B,G,YA9CH,WAAO,IAAD,EACU9B,mBAAS,IADnB,mBACTiB,EADS,KACFc,EADE,KAGhBC,qBAAU,WACR,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QANvB,0BAOlBJ,GACFF,EAASE,KAEV,IAEHD,qBAAU,WACRI,aAAaE,QAbS,wBAakBJ,KAAKK,UAAUtB,MACtD,CAACA,IAqBJ,OACE,yBAAKd,UAAU,sBACb,6CACA,kBAAC,EAAD,CAAUJ,QAtBE,SAAC6B,EAAMN,GACrB,IAAMkB,EAAQ,sBAAOvB,GAAP,CAAc,CAAEK,KAAIM,UAClCG,EAASS,IAoBqBvB,MAAOA,IACnC,kBAAC,EAAD,CACEA,MAAOA,EACPC,YApBc,SAACI,GACnBS,EAASd,EAAMwB,QAAO,SAACpB,GAAD,OAAUA,EAAKC,KAAOA,OAoBxCH,cAjBgB,SAACG,GACrB,IAAMkB,EAAWvB,EAAMG,KAAI,SAACC,GAI1B,OAHIA,EAAKC,KAAOA,IACdD,EAAKK,aAAeL,EAAKK,aAEpBL,KAETU,EAASS,SC1BOE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3c3abcf4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputField\":\"TodoForm_inputField__1MkMg\",\"todoInput\":\"TodoForm_todoInput__25ad3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"TodoList_list__3EBr4\",\"todolist\":\"TodoList_todolist__2lEGk\"};","import React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport style from \"./TodoForm.module.css\";\r\n\r\nconst TodoForm = ({ addTodo }) => {\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const handleInput = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!input) return;\r\n    addTodo(input, uuidv4());\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <form className={style.inputField} onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Add todo...\"\r\n        className={style.todoInput}\r\n        value={input}\r\n        onChange={handleInput}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React from \"react\";\r\nimport style from \"./TodoList.module.css\";\r\n\r\nconst TodoList = ({ todos, removeTodos, completeTodos }) => {\r\n  return (\r\n    <div>\r\n      {todos.map((todo) => (\r\n        <div className=\"card-panel\" id={style.list} key={todo.id}>\r\n          <div>\r\n            <p\r\n              style={{\r\n                textDecoration: todo.isCompleted === true ? \"line-through\" : \"\",\r\n              }}\r\n              className={style.todolist}\r\n            >\r\n              {todo.task}\r\n            </p>\r\n          </div>\r\n          <div>\r\n            <button\r\n              className=\"btn waves-effect waves-light red\"\r\n              onClick={() => removeTodos(todo.id)}\r\n            >\r\n              <i className=\"material-icons\">close</i>\r\n            </button>\r\n            <button\r\n              className=\"btn waves-effect waves-light\"\r\n              onClick={() => completeTodos(todo.id)}\r\n            >\r\n              <i className=\"material-icons\">check</i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState, useEffect } from \"react\";\nimport TodoForm from \"./component/TodoForm\";\nimport TodoList from \"./component/TodoList\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport \"./App.css\";\n\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storageTodos) {\n      setTodos(storageTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  const addTodo = (task, id) => {\n    const newTodos = [...todos, { id, task }];\n    setTodos(newTodos);\n  };\n\n  const removeTodos = (id) => {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  };\n\n  const completeTodos = (id) => {\n    const newTodos = todos.map((todo) => {\n      if (todo.id === id) {\n        todo.isCompleted = !todo.isCompleted;\n      }\n      return todo;\n    });\n    setTodos(newTodos);\n  };\n\n  return (\n    <div className=\"todo-app container\">\n      <h1>Todo List App</h1>\n      <TodoForm addTodo={addTodo} todos={todos} />\n      <TodoList\n        todos={todos}\n        removeTodos={removeTodos}\n        completeTodos={completeTodos}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}